rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isModerator() {
      // Ensure user document and moderator field exist before checking
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.moderator == true;
    }

    // Get user profile data (e.g., roles in branches)
    function getUserProfile(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Check if user has a specific role in a given branch
    function hasRoleInBranch(userId, branchId, role) {
      let profile = getUserProfile(userId);
      // Check for existence of branches field before trying to access it
      return 'branches' in profile && profile.branches.filter(b => b.id == branchId && role in b.roles).size() > 0;
    }
    
    // Check if the request is coming from a "transfer"-related operation
    function isTransferContext() {
      return isSignedIn();
    }

    // [NEW] Rules for 'branchApplications' collection
    match /branchApplications/{applicationId} {
      // Anyone can create an application to join.
      allow create: if true;
      
      // Only moderators can read, update (approve/reject), or delete applications.
      allow read, update, delete: if isModerator();
    }

    // [REVISED] Rules for 'stores' collection (branches)
    match /stores/{branchId} {
      // Any signed-in user can read store/branch information.
      allow read: if isSignedIn();
      
      // ONLY moderators can create, update, or delete stores.
      allow write: if isModerator();

      // Rules for 'inventory' subcollection within a store
      match /inventory/{productId} {
        allow read: if isTransferContext() || hasRoleInBranch(request.auth.uid, branchId, 'SALES') || hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
        allow write: if hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
        
        // Rules for nested subcollections in inventory
        match /{path=**}/models/{modelId} {
           allow read: if isTransferContext() || hasRoleInBranch(request.auth.uid, branchId, 'SALES') || hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
           allow write: if hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
        }
      }
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Users can read their own profile. Moderators can read any profile.
      allow read: if isSignedIn() && (request.auth.uid == userId || isModerator());
      
      // Users can update their own profile. Moderators can update any profile.
      allow write: if isSignedIn() && (request.auth.uid == userId || isModerator());
    }

    // Rules for 'orders' collection (transfer requests)
    match /orders/{orderId} {
      // For now, any signed-in user can read/write. 
      // This should be refined later to check if the user is part of the order (from/to branch).
      allow read, write: if isSignedIn();
    }
    
    // Rules for 'notifications' collection
    match /notifications/{notificationId} {
      // This should be refined to check if the user is the recipient of the notification.
      allow read, write: if isSignedIn();
    }
  }
}
