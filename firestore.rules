rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ============== Helpers ============== */
    function isSignedIn() {
      return request.auth != null;
    }

    // อ่านโปรไฟล์ผู้ใช้ (moderator, branchPerms, ...)
    function userData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // moderator จาก custom token หรือ users/{uid}.moderator
    function isModerator() {
      return isSignedIn() &&
        (
          request.auth.token.moderator == true ||
          (userData(request.auth.uid).moderator == true)
        );
    }

    /* ===== Legacy roles (คงไว้เพื่อความเข้ากันได้) ===== */
    // เอกสารถูกตั้งชื่อเป็น: {uid}_{branchId}_{ROLE}
    function hasRoleInBranch(uid, branchId, role) {
      return exists(/databases/$(database)/documents/userBranchRoles/$(uid + "_" + branchId + "_" + role));
    }
    function isBranchAdmin(uid, branchId) {
      return isModerator() || hasRoleInBranch(uid, branchId, "ADMIN");
    }
    function isBranchSales(uid, branchId) {
      return isBranchAdmin(uid, branchId) || hasRoleInBranch(uid, branchId, "SALES");
    }
    function isBranchViewer(uid, branchId) {
      return isBranchAdmin(uid, branchId)
          || hasRoleInBranch(uid, branchId, "SALES")
          || hasRoleInBranch(uid, branchId, "VIEWER")
          || hasRoleInBranch(uid, branchId, "USER");
    }

    /* ===== New permission model (users/{uid}.branchPerms) ===== */
    function hasBranchPerm(uid, branchId, perm) {
      return ('branchPerms' in userData(uid)) &&
             (branchId in userData(uid).branchPerms) &&
             (perm in userData(uid).branchPerms[branchId]) &&
             (userData(uid).branchPerms[branchId][perm] == true);
    }

    // ใช้อ่านง่าย ๆ ถ้ามีสิทธิ์ "ใด ๆ" ในสาขานั้น
    function hasAnyBranchPerm(uid, branchId) {
      return ('branchPerms' in userData(uid)) &&
             (branchId in userData(uid).branchPerms);
    }

    // helper: สรุปสิทธิ์ดูเอกสารของ 1 สาขา
    function canViewBranch(uid, b) {
      return isBranchViewer(uid, b)
          || hasBranchPerm(uid, b, 'transfer:read')
          || hasBranchPerm(uid, b, 'overview:read')
          || hasAnyBranchPerm(uid, b);
    }

    // === รวม logic ตรวจ "เอกสารนี้เกี่ยวกับสาขาที่ผู้ใช้มีสิทธิ์หรือไม่" แบบไม่ใช้ let เกินลิมิต ===
    // รองรับฟิลด์หลายแบบ: fromBranchId/toBranchId, fromStoreId/toStoreId, branchId เดี่ยว,
    // หรือ array: involvedBranches, branchIds, branches
    function relatedToBranch(uid) {
      return
        // single fields
        (('fromBranchId' in resource.data) && canViewBranch(uid, resource.data.fromBranchId)) ||
        (('toBranchId'   in resource.data) && canViewBranch(uid, resource.data.toBranchId))   ||
        (('fromStoreId'  in resource.data) && canViewBranch(uid, resource.data.fromStoreId))  ||
        (('toStoreId'    in resource.data) && canViewBranch(uid, resource.data.toStoreId))    ||
        (('branchId'     in resource.data) && canViewBranch(uid, resource.data.branchId))     ||

        // array fields (เช็ค index ต้น ๆ ให้พอใช้งานทั่วไป)
        (('involvedBranches' in resource.data) && resource.data.involvedBranches.size() > 0 && canViewBranch(uid, resource.data.involvedBranches[0])) ||
        (('involvedBranches' in resource.data) && resource.data.involvedBranches.size() > 1 && canViewBranch(uid, resource.data.involvedBranches[1])) ||

        (('branchIds' in resource.data) && resource.data.branchIds.size() > 0 && canViewBranch(uid, resource.data.branchIds[0])) ||
        (('branchIds' in resource.data) && resource.data.branchIds.size() > 1 && canViewBranch(uid, resource.data.branchIds[1])) ||

        (('branches' in resource.data) && resource.data.branches.size() > 0 && canViewBranch(uid, resource.data.branches[0])) ||
        (('branches' in resource.data) && resource.data.branches.size() > 1 && canViewBranch(uid, resource.data.branches[1]));
    }

    /* ======================= roles (legacy) ======================= */
    match /roles/{roleId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isModerator();
    }

    match /userBranchRoles/{docId} {
      // เดิมใช้ startsWith() → เปลี่ยนเป็น regex matches()
      allow get: if isSignedIn() && (
        isModerator() ||
        docId.matches('^' + request.auth.uid + '_.+')
      );

      // list / read: ประเมินต่อเอกสาร (Firestore จะตรวจทีละ doc ในผลลัพธ์ query)
      allow list, read: if isSignedIn() && (
        isModerator() ||
        (resource.data.uid == request.auth.uid) ||
        (('branchId' in resource.data) && isBranchAdmin(request.auth.uid, resource.data.branchId))
      );

      // เขียนผ่าน server: moderator หรือ admin ของสาขาที่เกี่ยวข้อง
      allow create: if isSignedIn() && (
        isModerator() ||
        (('branchId' in request.resource.data) && isBranchAdmin(request.auth.uid, request.resource.data.branchId))
      );
      allow update: if false;
      allow delete: if isSignedIn() && (
        isModerator() ||
        (('branchId' in resource.data) && isBranchAdmin(request.auth.uid, resource.data.branchId))
      );
    }

    /* ======================= users ======================= */
    match /users/{userId} {
      allow read, write: if isSignedIn() && (request.auth.uid == userId || request.auth.token.moderator == true);
    }

    /* ============== branches / stores & inventory ============== */
    match /branches/{branchId} {
      allow read: if isSignedIn();
      allow write: if isModerator();
    }

    match /stores/{branchId} {
      allow read:  if isSignedIn();
      allow write: if isModerator();

      match /inventory/{brandId} {
        allow read:  if isSignedIn();
        allow write: if isSignedIn() && (
          isBranchAdmin(request.auth.uid, branchId) ||
          hasBranchPerm(request.auth.uid, branchId, 'inventory:write')
        );

        match /models/{modelId} {
          allow read:  if isSignedIn();
          allow write: if isSignedIn() && (
            isBranchAdmin(request.auth.uid, branchId) ||
            hasBranchPerm(request.auth.uid, branchId, 'inventory:write')
          );

          match /variants/{variantId} {
            allow read:  if isSignedIn();
            allow write: if isSignedIn() && (
              isBranchAdmin(request.auth.uid, branchId) ||
              hasBranchPerm(request.auth.uid, branchId, 'inventory:write')
            );

            match /dots/{dotCode} {
              allow read:  if isSignedIn();
              allow write: if isSignedIn() && (
                isBranchAdmin(request.auth.uid, branchId) ||
                hasBranchPerm(request.auth.uid, branchId, 'inventory:write')
              );
            }
          }
        }

        // เผื่อ collection ย่อยอื่น ๆ ใต้ inventory
        match /{any=**} {
          allow read:  if isSignedIn();
          allow write: if isSignedIn() && (
            isBranchAdmin(request.auth.uid, branchId) ||
            hasBranchPerm(request.auth.uid, branchId, 'inventory:write')
          );
        }
      }
    }

    /* ======================== orders ======================== */
    match /orders/{orderId} {
      // สร้างได้ถ้ามีสิทธิ์ในสาขาที่เกี่ยวข้อง (รองรับสคีมาเดิมและใหม่ buyer/seller)
      allow create: if isSignedIn() && (
        isModerator() ||
        (('branchId' in request.resource.data) &&
          (isBranchSales(request.auth.uid, request.resource.data.branchId) ||
           hasBranchPerm(request.auth.uid, request.resource.data.branchId, 'inventory:write'))) ||
        (('buyerBranchId' in request.resource.data) &&
          (isBranchSales(request.auth.uid, request.resource.data.buyerBranchId) ||
           hasBranchPerm(request.auth.uid, request.resource.data.buyerBranchId, 'inventory:write'))) ||
        (('sellerBranchId' in request.resource.data) &&
          (isBranchSales(request.auth.uid, request.resource.data.sellerBranchId) ||
           hasBranchPerm(request.auth.uid, request.resource.data.sellerBranchId, 'inventory:write')))
      );

      // อ่านได้ถ้าเกี่ยวข้องกับสาขาที่มีสิทธิ์ดู (legacy viewer + perms ใหม่)
      allow read: if isSignedIn() && (
        isModerator() ||
        (
          (('branchId' in resource.data)      && canViewBranch(request.auth.uid, resource.data.branchId)) ||
          (('buyerBranchId' in resource.data) && canViewBranch(request.auth.uid, resource.data.buyerBranchId)) ||
          (('sellerBranchId' in resource.data)&& canViewBranch(request.auth.uid, resource.data.sellerBranchId))
        )
      );

      // อัปเดตได้ถ้าเป็น admin หรือ inventory:write ของสาขาที่เกี่ยวข้อง
      allow update: if isSignedIn() && (
        isModerator() ||
        (('branchId' in resource.data)      && (isBranchAdmin(request.auth.uid, resource.data.branchId)      || hasBranchPerm(request.auth.uid, resource.data.branchId,      'inventory:write'))) ||
        (('buyerBranchId' in resource.data) && (isBranchAdmin(request.auth.uid, resource.data.buyerBranchId) || hasBranchPerm(request.auth.uid, resource.data.buyerBranchId, 'inventory:write'))) ||
        (('sellerBranchId' in resource.data)&& (isBranchAdmin(request.auth.uid, resource.data.sellerBranchId)|| hasBranchPerm(request.auth.uid, resource.data.sellerBranchId,'inventory:write')))
      );

      allow delete: if isModerator();
    }

    /* ======================= transfers (ถ้ามีใช้งาน) ======================= */
    match /transfers/{transferId} {
      // create: legacy SALES/ADMIN หรือ perm transfer:create
      allow create: if isSignedIn() && (
        isModerator() ||
        (('fromBranchId' in request.resource.data) && (isBranchSales(request.auth.uid, request.resource.data.fromBranchId) || hasBranchPerm(request.auth.uid, request.resource.data.fromBranchId, 'transfer:create'))) ||
        (('toBranchId'   in request.resource.data) && (isBranchSales(request.auth.uid, request.resource.data.toBranchId)   || hasBranchPerm(request.auth.uid, request.resource.data.toBranchId,   'transfer:create'))) ||
        (('fromStoreId'  in request.resource.data) && (isBranchSales(request.auth.uid, request.resource.data.fromStoreId)  || hasBranchPerm(request.auth.uid, request.resource.data.fromStoreId,  'transfer:create'))) ||
        (('toStoreId'    in request.resource.data) && (isBranchSales(request.auth.uid, request.resource.data.toStoreId)    || hasBranchPerm(request.auth.uid, request.resource.data.toStoreId,    'transfer:create'))) ||
        (('involvedBranches' in request.resource.data) &&
          (
            ((request.resource.data.involvedBranches.size() >= 1) && (isBranchSales(request.auth.uid, request.resource.data.involvedBranches[0]) || hasBranchPerm(request.auth.uid, request.resource.data.involvedBranches[0], 'transfer:create'))) ||
            ((request.resource.data.involvedBranches.size() >= 2) && (isBranchSales(request.auth.uid, request.resource.data.involvedBranches[1]) || hasBranchPerm(request.auth.uid, request.resource.data.involvedBranches[1], 'transfer:create')))
          )
        ) ||
        (('branchIds' in request.resource.data) &&
          (
            ((request.resource.data.branchIds.size() >= 1) && (isBranchSales(request.auth.uid, request.resource.data.branchIds[0]) || hasBranchPerm(request.auth.uid, request.resource.data.branchIds[0], 'transfer:create'))) ||
            ((request.resource.data.branchIds.size() >= 2) && (isBranchSales(request.auth.uid, request.resource.data.branchIds[1]) || hasBranchPerm(request.auth.uid, request.resource.data.branchIds[1], 'transfer:create')))
          )
        )
      );

      // read: อนุญาตถ้าเกี่ยวกับสาขาที่มีสิทธิ์ (ใช้ helper รวม)
      allow read: if isSignedIn() && (isModerator() || relatedToBranch(request.auth.uid));

      // update: admin หรือ transfer:approve ของสาขาที่เกี่ยวข้อง
      allow update: if isSignedIn() && (
        isModerator() ||
        (('fromBranchId' in resource.data) && (isBranchAdmin(request.auth.uid, resource.data.fromBranchId) || hasBranchPerm(request.auth.uid, resource.data.fromBranchId, 'transfer:approve'))) ||
        (('toBranchId'   in resource.data) && (isBranchAdmin(request.auth.uid, resource.data.toBranchId)   || hasBranchPerm(request.auth.uid, resource.data.toBranchId,   'transfer:approve'))) ||
        (('fromStoreId'  in resource.data) && (isBranchAdmin(request.auth.uid, resource.data.fromStoreId)  || hasBranchPerm(request.auth.uid, resource.data.fromStoreId,  'transfer:approve'))) ||
        (('toStoreId'    in resource.data) && (isBranchAdmin(request.auth.uid, resource.data.toStoreId)    || hasBranchPerm(request.auth.uid, resource.data.toStoreId,    'transfer:approve'))) ||
        (('involvedBranches' in resource.data) &&
          (
            ((resource.data.involvedBranches.size() >= 1) && (isBranchAdmin(request.auth.uid, resource.data.involvedBranches[0]) || hasBranchPerm(request.auth.uid, resource.data.involvedBranches[0], 'transfer:approve'))) ||
            ((resource.data.involvedBranches.size() >= 2) && (isBranchAdmin(request.auth.uid, resource.data.involvedBranches[1]) || hasBranchPerm(request.auth.uid, resource.data.involvedBranches[1], 'transfer:approve')))
          )
        ) ||
        (('branchIds' in resource.data) &&
          (
            ((resource.data.branchIds.size() >= 1) && (isBranchAdmin(request.auth.uid, resource.data.branchIds[0]) || hasBranchPerm(request.auth.uid, resource.data.branchIds[0], 'transfer:approve'))) ||
            ((resource.data.branchIds.size() >= 2) && (isBranchAdmin(request.auth.uid, resource.data.branchIds[1]) || hasBranchPerm(request.auth.uid, resource.data.branchIds[1], 'transfer:approve')))
          )
        )
      );

      allow delete: if isModerator();
    }

    /* ======================= dailySummaries ======================= */
    match /dailySummaries/{sumId} {
      allow read: if isSignedIn() && (
        isModerator() ||
        (('branchId' in resource.data) && canViewBranch(request.auth.uid, resource.data.branchId))
      );
      allow create, update, delete: if isModerator();
    }

    /* ======================= notifications (patched) ======================= */
    match /notifications/{notifId} {
      // อ่าน/อัปเดต: ต้องมีสิทธิ์ดูสาขาที่ระบุ
      allow read, update: if isSignedIn() && (
        isModerator() ||
        (('branchId' in resource.data) && canViewBranch(request.auth.uid, resource.data.branchId))
      );

      // ✅ ผ่อน create ให้ user ที่เกี่ยวข้องกับสาขานั้นสร้างได้ (หรือจะเข้มกว่านี้โดยตัด viewer ออกก็ได้)
      allow create: if isSignedIn() && (
        isModerator() ||
        (('branchId' in request.resource.data) &&
          (
            isBranchViewer(request.auth.uid, request.resource.data.branchId) ||
            hasBranchPerm(request.auth.uid, request.resource.data.branchId, 'inventory:write') ||
            hasBranchPerm(request.auth.uid, request.resource.data.branchId, 'transfer:approve') ||
            hasBranchPerm(request.auth.uid, request.resource.data.branchId, 'transfer:read')
          )
        )
      );

      allow delete: if isModerator();
    }

    /* ===================== stockMovements ===================== */
    match /stockMovements/{moveId} {
      allow read: if isSignedIn() && (
        isModerator() ||
        (('branchId' in resource.data) && canViewBranch(request.auth.uid, resource.data.branchId))
      );
      allow create: if isSignedIn() && (
        isModerator() ||
        (('branchId' in request.resource.data) &&
          (isBranchAdmin(request.auth.uid, request.resource.data.branchId) ||
           hasBranchPerm(request.auth.uid, request.resource.data.branchId, 'inventory:write')))
      );
      allow update, delete: if false;
    }

    /* ===================== branchApplications ===================== */
    match /branchApplications/{appId} {
      allow create: if true;
      allow read, update, delete: if isModerator();
    }

    /* =============== Default deny =============== */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
