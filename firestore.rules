rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========== Helper Functions ==========
    function isSignedIn() {
      return request.auth != null;
    }

    function isModerator() {
      return isSignedIn() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.moderator == true;
    }

    function getUserProfile(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function hasRoleInBranch(userId, branchId, role) {
      let profile = getUserProfile(userId);
      return 'branches' in profile &&
             profile.branches.filter(b => b.id == branchId && role in b.roles).size() > 0;
    }

    // ========== Branch Applications ==========
    match /branchApplications/{applicationId} {
      allow create: if true; // ใครก็ส่งคำขอได้
      allow read, update, delete: if isModerator();
    }

    // ========== Stores & Inventory ==========
    match /stores/{branchId} {
      // อ่านข้อมูล branch ได้ ถ้าเป็น Moderator หรือมี role ใน branch นี้
      allow read: if isModerator() ||
                   hasRoleInBranch(request.auth.uid, branchId, 'SALES') ||
                   hasRoleInBranch(request.auth.uid, branchId, 'ADMIN');

      // เขียน branch ได้เฉพาะ Moderator
      allow write: if isModerator();

      // Subcollection: inventory
      match /inventory/{productId} {
        // อ่านได้เฉพาะ Moderator หรือคนที่มี role ใน branch นั้น
        allow read: if isModerator() ||
                     hasRoleInBranch(request.auth.uid, branchId, 'SALES') ||
                     hasRoleInBranch(request.auth.uid, branchId, 'ADMIN');

        // เขียนได้เฉพาะ Admin ของ branch นั้น หรือ Moderator
        allow write: if isModerator() ||
                      hasRoleInBranch(request.auth.uid, branchId, 'ADMIN');

        // nested subcollection
        match /{path=**}/models/{modelId} {
          allow read: if isModerator() ||
                       hasRoleInBranch(request.auth.uid, branchId, 'SALES') ||
                       hasRoleInBranch(request.auth.uid, branchId, 'ADMIN');
          allow write: if isModerator() ||
                        hasRoleInBranch(request.auth.uid, branchId, 'ADMIN');
        }
      }
    }

    // ========== Users ==========
    match /users/{userId} {
      allow read: if isSignedIn() &&
                  (request.auth.uid == userId || isModerator());
      allow write: if isSignedIn() &&
                   (request.auth.uid == userId || isModerator());
    }

    // ========== Orders ==========
    match /orders/{orderId} {
      // ต้องการ refine ให้เข้มงวดขึ้น
      // เบื้องต้น: อนุญาตเฉพาะ Moderator หรือผู้ที่อยู่ branch ที่เกี่ยวข้องกับ order
      allow read, write: if isModerator() ||
                         (isSignedIn() &&
                           (hasRoleInBranch(request.auth.uid, resource.data.fromBranch, 'SALES') ||
                            hasRoleInBranch(request.auth.uid, resource.data.fromBranch, 'ADMIN') ||
                            hasRoleInBranch(request.auth.uid, resource.data.toBranch, 'SALES') ||
                            hasRoleInBranch(request.auth.uid, resource.data.toBranch, 'ADMIN')));
    }

    // ========== Notifications ==========
    match /notifications/{notificationId} {
      // อ่าน/เขียนได้เฉพาะ recipient เอง หรือ moderator
      allow read, write: if isModerator() ||
                          (isSignedIn() &&
                           resource.data.recipientId == request.auth.uid);
    }
  }
}
