rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isModerator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.moderator == true;
    }

    // Get user profile data (e.g., roles in branches)
    function getUserProfile(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Check if user has a specific role in a given branch
    function hasRoleInBranch(userId, branchId, role) {
      let profile = getUserProfile(userId);
      let branches = profile.branches;
      let matchingBranches = branches.filter(b => b.id == branchId && role in b.roles);
      return matchingBranches.size() > 0;
    }
    
    // Check if user has permission based on role
    function can(perm) {
      // This is a simplified check. In a real app, you'd look up roles/perms.
      return true; // Placeholder for more complex logic if needed
    }

    // Check if the request is coming from a "transfer"-related operation
    // We can identify this by checking for a specific parameter in the request query.
    // NOTE: This relies on the frontend consistently sending this parameter.
    function isTransferContext() {
      // This is a placeholder for a more robust check if possible.
      // For now, we'll rely on authenticated access for this rule.
      // A better way would be a custom claim or specific query flag if the client could send one.
      return isSignedIn();
    }

    // Rules for 'stores' collection (branches)
    match /stores/{branchId} {
      allow read: if isSignedIn();
      allow write: if isModerator();

      // Rules for 'inventory' subcollection within a store
      match /inventory/{productId} {
        // [แก้ไข] เพิ่มเงื่อนไขใหม่ที่นี่
        // Allow reading inventory from ANY branch IF the user is signed in (for Transfer Platform)
        // Otherwise, for direct reads (like My Inventory), check for specific branch roles.
        allow read: if isTransferContext() || hasRoleInBranch(request.auth.uid, branchId, 'SALES') || hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
        
        allow write: if hasRoleInBranch(request.auth.uid, branchId, 'ADMIN') || isModerator();
      }
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isModerator());
      allow write: if isModerator() || request.auth.uid == userId;
    }

    // Rules for 'orders' collection (transfer requests)
    match /orders/{orderId} {
      allow read, write: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
      allow read, write: if isSignedIn();
    }
  }
}