// lib/services/InventoryService.ts - Complete Final Version with Fixed OrderService
import {
  collection,
  doc,
  getDocs,
  getDoc,
  query,
  where,
  orderBy,
  setDoc,
  updateDoc,
  deleteDoc,
  writeBatch,
  serverTimestamp,
  increment,
  addDoc,
  onSnapshot,
  Timestamp,
} from 'firebase/firestore';
import { db } from '@/lib/firebase';

// ===== Types for Your Data Structure =====
export type Dot = {
  dotCode: string;
  qty: number;
  promoPrice?: number | null;
  basePrice?: number;
  createdAt?: any;
  updatedAt?: any;
};

export type Variant = {
  variantId: string;
  size: string;
  loadIndex?: string;
  basePrice?: number;
  dots: Dot[];
  updatedAt?: any;
};

export type Model = {
  modelId: string;
  modelName: string;
  variants: Variant[];
  updatedAt?: any;
};

export type Brand = {
  brandId: string;
  brandName: string;
  models: Model[];
  updatedAt?: any;
};

export type StoreInventory = {
  storeId: string;
  storeName: string;
  brands: Brand[];
};

// For compatibility with existing UI components
export type SizeVariant = {
  variantId: string;
  specification: string; // size + loadIndex
  dots: {
    dotCode: string;
    qty: number;
    basePrice: number;
    promoPrice?: number | null;
  }[];
};

export type BranchInventory = {
  branchId: string;
  branchName: string;
  sizes: SizeVariant[];
};

export type GroupedProduct = {
  id: string; // brand-model format
  name: string; // brandName + modelName
  brand: string;
  model?: string;
  branches: BranchInventory[];
};

export type StockMovementType = 'adjust' | 'in' | 'out' | 'transfer_in' | 'transfer_out';

export type StockMovement = {
  branchId: string;
  brand: string;
  model: string;
  variantId: string;
  dotCode: string;
  qtyChange: number; // +in, -out
  type: StockMovementType;
  reason?: string;
  createdAt: Timestamp;
};

export type OrderItem = {
  productId: string;
  productName: string;
  specification: string;
  dotCode: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  variantId: string;
};

export type OrderStatus = 'requested' | 'confirmed' | 'delivered' | 'cancelled';

export type Order = {
  id?: string;
  orderNumber?: string;
  buyerBranchId: string;
  buyerBranchName: string;
  sellerBranchId: string;
  sellerBranchName: string;
  status: OrderStatus;
  totalAmount: number;
  notes?: string;
  items: OrderItem[];
  createdAt?: Timestamp;
  updatedAt?: Timestamp;
  cancelReason?: string;
};

// Store document type
export type StoreDoc = {
  branchName: string;
  isActive?: boolean;
  phone?: string;
  email?: string;
  lineId?: string;
  address?: {
    line1?: string;
    line2?: string;
    district?: string;
    province?: string;
    postalCode?: string;
    country?: string;
  };
  location?: {
    lat?: number;
    lng?: number;
  };
  services?: string[];
  hours?: Record<string, { open: string; close: string; closed: boolean }>;
  notes?: string;
  orgId?: string;
  createdAt?: any;
  updatedAt?: any;
};

// ===== Helper Functions =====
function slugifyId(s: string): string {
  return s
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/(^-|-$)+/g, '')
    .slice(0, 120);
}

function ensureArray<T>(v: T | T[] | undefined | null): T[] {
  if (!v) return [];
  return Array.isArray(v) ? v : [v];
}

// ===== Store Service =====
export const StoreService = {
  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stores ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  async getAllStores(): Promise<Record<string, string>> {
    try {
      const snap = await getDocs(collection(db, 'stores'));
      const out: Record<string, string> = {};
      snap.forEach((d) => {
        const data = d.data() as any;
        out[d.id] = data.branchName ?? d.id;
      });
      return out;
    } catch (error) {
      console.error('‚ùå Error getting all stores:', error);
      throw error;
    }
  },

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ store ID ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
   */
  async isStoreIdAvailable(storeId: string): Promise<boolean> {
    try {
      const ref = doc(db, 'stores', storeId);
      const ds = await getDoc(ref);
      return !ds.exists();
    } catch (error) {
      console.error('‚ùå Error checking store availability:', error);
      return false;
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á store ‡πÉ‡∏´‡∏°‡πà
   */
  async createStore(storeId: string, payload: StoreDoc): Promise<void> {
    try {
      const ref = doc(db, 'stores', storeId);
      await setDoc(ref, {
        ...payload,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      });
      console.log(`‚úÖ Created store: ${storeId}`);
    } catch (error) {
      console.error(`‚ùå Error creating store ${storeId}:`, error);
      throw error;
    }
  },

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï store
   */
  async updateStore(storeId: string, patch: Partial<StoreDoc>): Promise<void> {
    try {
      const ref = doc(db, 'stores', storeId);
      await updateDoc(ref, { 
        ...patch, 
        updatedAt: serverTimestamp() 
      });
      console.log(`‚úÖ Updated store: ${storeId}`);
    } catch (error) {
      console.error(`‚ùå Error updating store ${storeId}:`, error);
      throw error;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• store ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
   */
  async getStore(storeId: string): Promise<StoreDoc | null> {
    try {
      const ref = doc(db, 'stores', storeId);
      const ds = await getDoc(ref);
      if (ds.exists()) {
        return { ...ds.data() } as StoreDoc;
      }
      return null;
    } catch (error) {
      console.error(`‚ùå Error getting store ${storeId}:`, error);
      throw error;
    }
  },
};

// ===== Main Inventory Service =====
export const InventoryService = {
  /**
   * ‡∏î‡∏∂‡∏á inventory ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
   */
  async fetchStoreInventory(storeId: string, storeName?: string): Promise<GroupedProduct[]> {
    console.log(`üîç Fetching inventory for store: ${storeId}`);
    
    try {
      const storeRef = doc(db, 'stores', storeId);
      const inventoryRef = collection(storeRef, 'inventory');
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• brands ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const brandsSnap = await getDocs(inventoryRef);
      console.log(`üìã Found ${brandsSnap.docs.length} brands in ${storeId}`);
      
      if (brandsSnap.empty) {
        console.log(`‚ö†Ô∏è No inventory data found for store: ${storeId}`);
        return [];
      }
      
      const products: GroupedProduct[] = [];
      
      for (const brandDoc of brandsSnap.docs) {
        const brandId = brandDoc.id;
        const brandData = brandDoc.data();
        const brandName = brandData.brandName || brandId;
        
        console.log(`üè∑Ô∏è Processing brand: ${brandName}`);
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• models ‡∏Ç‡∏≠‡∏á brand ‡∏ô‡∏µ‡πâ
        const modelsRef = collection(brandDoc.ref, 'models');
        const modelsSnap = await getDocs(modelsRef);
        
        for (const modelDoc of modelsSnap.docs) {
          const modelId = modelDoc.id;
          const modelData = modelDoc.data();
          const modelName = modelData.modelName || modelId;
          
          console.log(`üöó Processing model: ${modelName}`);
          
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• variants ‡∏Ç‡∏≠‡∏á model ‡∏ô‡∏µ‡πâ
          const variantsRef = collection(modelDoc.ref, 'variants');
          const variantsSnap = await getDocs(variantsRef);
          
          const sizes: SizeVariant[] = [];
          
          for (const variantDoc of variantsSnap.docs) {
            const variantData = variantDoc.data();
            const variantId = variantDoc.id;
            const size = variantData.size || '';
            const loadIndex = variantData.loadIndex || '';
            const basePrice = variantData.basePrice || 0;
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á specification ‡∏à‡∏≤‡∏Å size + loadIndex
            const specification = loadIndex ? `${size} (${loadIndex})` : size;
            
            console.log(`üìè Processing variant: ${specification}`);
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dots ‡∏Ç‡∏≠‡∏á variant ‡∏ô‡∏µ‡πâ
            const dotsRef = collection(variantDoc.ref, 'dots');
            const dotsSnap = await getDocs(dotsRef);
            
            const dots = dotsSnap.docs.map(dotDoc => {
              const dotData = dotDoc.data();
              return {
                dotCode: dotDoc.id,
                qty: dotData.qty || 0,
                basePrice: basePrice,
                promoPrice: dotData.promoPrice || null,
              };
            }).filter(dot => dot.qty > 0); // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ dots ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å
            
            if (dots.length > 0) {
              sizes.push({
                variantId,
                specification,
                dots,
              });
            }
          }
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á GroupedProduct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö brand+model ‡∏ô‡∏µ‡πâ
          if (sizes.length > 0) {
            const productId = `${brandId}-${modelId}`;
            const productName = `${brandName} ${modelName}`;
            
            products.push({
              id: productId,
              name: productName,
              brand: brandName,
              model: modelName,
              branches: [{
                branchId: storeId,
                branchName: storeName || storeId,
                sizes,
              }],
            });
          }
        }
      }
      
      console.log(`‚úÖ Processed ${products.length} products for store ${storeId}`);
      return products;
      
    } catch (error) {
      console.error(`‚ùå Error fetching inventory for store ${storeId}:`, error);
      throw error;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á inventory ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Transfer Platform)
   */
  async fetchInventory(): Promise<GroupedProduct[]> {
    console.log('üîç Fetching inventory from all stores...');
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stores ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const storesSnap = await getDocs(collection(db, 'stores'));
      console.log(`üìã Found ${storesSnap.docs.length} stores`);
      
      if (storesSnap.empty) {
        console.log('‚ö†Ô∏è No stores found');
        return [];
      }
      
      const productMap = new Map<string, GroupedProduct>(); // key = brand-model
      
      for (const storeDoc of storesSnap.docs) {
        const storeId = storeDoc.id;
        const storeData = storeDoc.data();
        const storeName = storeData.branchName || storeId;
        
        console.log(`üè™ Processing store: ${storeName}`);
        
        try {
          // ‡∏î‡∏∂‡∏á inventory ‡∏Ç‡∏≠‡∏á store ‡∏ô‡∏µ‡πâ
          const storeProducts = await this.fetchStoreInventory(storeId, storeName);
          
          // ‡∏£‡∏ß‡∏° products ‡∏ó‡∏µ‡πà‡∏°‡∏µ brand+model ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
          for (const product of storeProducts) {
            const key = product.id; // brand-model
            
            if (productMap.has(key)) {
              // ‡πÄ‡∏û‡∏¥‡πà‡∏° branch ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô product ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
              const existing = productMap.get(key)!;
              existing.branches.push(...product.branches);
            } else {
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á product ‡πÉ‡∏´‡∏°‡πà
              productMap.set(key, { ...product });
            }
          }
        } catch (storeError) {
          console.warn(`‚ö†Ô∏è Failed to fetch inventory for store ${storeId}:`, storeError);
          // ‡∏Ç‡πâ‡∏≤‡∏° store ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
        }
      }
      
      const result = Array.from(productMap.values());
      console.log(`‚úÖ Total unique products: ${result.length}`);
      return result;
      
    } catch (error) {
      console.error('‚ùå Error fetching all inventory:', error);
      throw error;
    }
  },

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô DOT
   */
  async updateDotQuantity(
    storeId: string,
    brandId: string,
    modelId: string,
    variantId: string,
    dotCode: string,
    newQty: number
  ): Promise<void> {
    console.log(`üîÑ Updating DOT quantity: ${storeId}/${brandId}/${modelId}/${variantId}/${dotCode} = ${newQty}`);
    
    try {
      const dotRef = doc(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants', variantId,
        'dots', dotCode
      );
      
      await updateDoc(dotRef, {
        qty: Math.max(0, newQty),
        updatedAt: serverTimestamp(),
      });
      
      console.log(`‚úÖ Updated DOT quantity successfully`);
    } catch (error) {
      console.error('‚ùå Error updating DOT quantity:', error);
      throw error;
    }
  },

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏•‡∏î ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô DOT
   */
  async adjustDotQuantity(
    storeId: string,
    brandId: string,
    modelId: string,
    variantId: string,
    dotCode: string,
    qtyChange: number
  ): Promise<void> {
    console.log(`üìä Adjusting DOT quantity: ${dotCode} by ${qtyChange}`);
    
    try {
      const dotRef = doc(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants', variantId,
        'dots', dotCode
      );
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DOT ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
      const dotDoc = await getDoc(dotRef);
      if (!dotDoc.exists()) {
        throw new Error(`DOT ${dotCode} not found`);
      }
      
      await updateDoc(dotRef, {
        qty: increment(qtyChange),
        updatedAt: serverTimestamp(),
      });
      
      console.log(`‚úÖ Adjusted DOT quantity by ${qtyChange}`);
    } catch (error) {
      console.error('‚ùå Error adjusting DOT quantity:', error);
      throw error;
    }
  },

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
   */
  async setPromoPrice(
    storeId: string,
    brandId: string,
    modelId: string,
    variantId: string,
    dotCode: string,
    promoPrice: number | null
  ): Promise<void> {
    console.log(`üí∞ Setting promo price: ${dotCode} = ${promoPrice}`);
    
    try {
      const dotRef = doc(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants', variantId,
        'dots', dotCode
      );
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DOT ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
      const dotDoc = await getDoc(dotRef);
      if (!dotDoc.exists()) {
        throw new Error(`DOT ${dotCode} not found`);
      }
      
      const updateData: any = {
        updatedAt: serverTimestamp(),
      };
      
      if (promoPrice !== null) {
        updateData.promoPrice = promoPrice;
      } else {
        // ‡∏•‡∏ö field promoPrice ‡πÇ‡∏î‡∏¢‡πÉ‡∏™‡πà null
        updateData.promoPrice = null;
      }
      
      await updateDoc(dotRef, updateData);
      
      console.log(`‚úÖ Updated promo price successfully`);
    } catch (error) {
      console.error('‚ùå Error setting promo price:', error);
      throw error;
    }
  },

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° DOT ‡πÉ‡∏´‡∏°‡πà
   */
  async addNewDot(
    storeId: string,
    brandId: string,
    modelId: string,
    variantId: string,
    dotCode: string,
    qty: number,
    promoPrice?: number
  ): Promise<void> {
    console.log(`‚ûï Adding new DOT: ${dotCode}`);
    
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ variant ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
      const variantRef = doc(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants', variantId
      );
      
      const variantDoc = await getDoc(variantRef);
      if (!variantDoc.exists()) {
        throw new Error(`Variant ${variantId} not found`);
      }
      
      const dotRef = doc(variantRef, 'dots', dotCode);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DOT ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
      const existingDot = await getDoc(dotRef);
      if (existingDot.exists()) {
        throw new Error(`DOT ${dotCode} already exists`);
      }
      
      const dotData: any = {
        qty: Math.max(0, qty),
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      };
      
      if (promoPrice !== undefined && promoPrice !== null) {
        dotData.promoPrice = promoPrice;
      }
      
      await setDoc(dotRef, dotData);
      
      console.log(`‚úÖ Added DOT successfully`);
    } catch (error) {
      console.error('‚ùå Error adding DOT:', error);
      throw error;
    }
  },

  /**
   * ‡∏•‡∏ö DOT
   */
  async deleteDot(
    storeId: string,
    brandId: string,
    modelId: string,
    variantId: string,
    dotCode: string
  ): Promise<void> {
    console.log(`üóëÔ∏è Deleting DOT: ${dotCode}`);
    
    try {
      const dotRef = doc(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants', variantId,
        'dots', dotCode
      );
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DOT ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
      const dotDoc = await getDoc(dotRef);
      if (!dotDoc.exists()) {
        throw new Error(`DOT ${dotCode} not found`);
      }
      
      await deleteDoc(dotRef);
      
      console.log(`‚úÖ Deleted DOT successfully`);
    } catch (error) {
      console.error('‚ùå Error deleting DOT:', error);
      throw error;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ variants ‡∏Ç‡∏≠‡∏á product
   */
  async getVariantsForProduct(
    storeId: string,
    brandId: string,
    modelId: string
  ): Promise<Array<{variantId: string, specification: string}>> {
    console.log(`üîç Getting variants for: ${brandId}/${modelId}`);
    
    try {
      const variantsRef = collection(
        db,
        'stores', storeId,
        'inventory', brandId,
        'models', modelId,
        'variants'
      );
      
      const variantsSnap = await getDocs(variantsRef);
      
      if (variantsSnap.empty) {
        console.log(`‚ö†Ô∏è No variants found for ${brandId}/${modelId}`);
        return [];
      }
      
      return variantsSnap.docs.map(doc => {
        const data = doc.data();
        const size = data.size || '';
        const loadIndex = data.loadIndex || '';
        const specification = loadIndex ? `${size} (${loadIndex})` : size;
        
        return {
          variantId: doc.id,
          specification,
        };
      });
    } catch (error) {
      console.error('‚ùå Error getting variants:', error);
      return [];
    }
  },

  /**
   * Helper: ‡πÅ‡∏¢‡∏Å brand, model, variant ‡∏à‡∏≤‡∏Å product path ‡∏ó‡∏µ‡πà UI ‡∏™‡πà‡∏á‡∏°‡∏≤
   */
  parseProductInfo(product: GroupedProduct, branchId: string, variantId: string, dotCode: string) {
    // ‡∏à‡∏≤‡∏Å product.id format: "brand-model"
    const parts = product.id.split('-');
    const brandId = parts[0] || slugifyId(product.brand);
    const modelId = parts.slice(1).join('-') || slugifyId(product.model || 'unknown');
    
    return {
      storeId: branchId,
      brandId,
      modelId,
      variantId,
      dotCode,
    };
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á stock movement (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logging)
   */
  async createStockMovement(
    storeId: string,
    target: { brand: string; model?: string; variantId: string; dotCode: string },
    type: StockMovementType,
    qtyChange: number,
    meta?: { reason?: string }
  ): Promise<void> {
    console.log(`üìù Creating stock movement: ${type} ${qtyChange} for ${target.dotCode}`);
    
    try {
      // ‡πÉ‡∏ä‡πâ adjustDotQuantity ‡πÅ‡∏ó‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      const brandId = slugifyId(target.brand);
      const modelId = slugifyId(target.model || 'unknown');
      
      await this.adjustDotQuantity(storeId, brandId, modelId, target.variantId, target.dotCode, qtyChange);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° logging ‡πÉ‡∏ô subcollection movements (optional)
      try {
        const movementData: StockMovement = {
          branchId: storeId,
          brand: target.brand,
          model: target.model || '',
          variantId: target.variantId,
          dotCode: target.dotCode,
          qtyChange,
          type,
          reason: meta?.reason,
          createdAt: serverTimestamp() as any,
        };
        
        await addDoc(collection(db, 'stockMovements'), movementData);
      } catch (logError) {
        console.warn('‚ö†Ô∏è Failed to log stock movement:', logError);
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      }
      
      console.log(`‚úÖ Stock movement completed`);
    } catch (error) {
      console.error('‚ùå Error creating stock movement:', error);
      throw error;
    }
  },

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ brand ‡πÅ‡∏•‡∏∞ model
   */
  async findProductByBrandModel(brand: string, model?: string): Promise<string | null> {
    try {
      const brandId = slugifyId(brand);
      const modelId = slugifyId(model || 'unknown');
      return `${brandId}-${modelId}`;
    } catch (error) {
      console.error('‚ùå Error finding product:', error);
      return null;
    }
  },

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á product ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
   */
  async ensureProduct(brand: string, model: string): Promise<string> {
    const brandId = slugifyId(brand);
    const modelId = slugifyId(model);
    const productId = `${brandId}-${modelId}`;
    
    // ‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á product document ‡πÅ‡∏¢‡∏Å
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô store/inventory structure ‡πÅ‡∏•‡πâ‡∏ß
    
    return productId;
  },

  /**
   * Upsert DOT (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö legacy compatibility)
   */
  async upsertDot(
    branchId: string,
    payload: {
      brand: string;
      model?: string;
      variantId: string;
      dotCode: string;
      qty: number;
      promoPrice?: number;
    }
  ): Promise<void> {
    const brandId = slugifyId(payload.brand);
    const modelId = slugifyId(payload.model || 'unknown');
    
    try {
      // ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞ error ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      await this.updateDotQuantity(branchId, brandId, modelId, payload.variantId, payload.dotCode, payload.qty);
      
      // ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏õ‡∏£‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (payload.promoPrice !== undefined) {
        await this.setPromoPrice(branchId, brandId, modelId, payload.variantId, payload.dotCode, payload.promoPrice);
      }
    } catch (error) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö DOT ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      if (error instanceof Error && error.message.includes('not found')) {
        await this.addNewDot(branchId, brandId, modelId, payload.variantId, payload.dotCode, payload.qty, payload.promoPrice);
      } else {
        throw error;
      }
    }
  },
};

// ===== Order Service ===== (Fixed Version)
export const OrderService = {
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÉ‡∏´‡∏°‡πà
   */
  async createOrder(payload: {
    buyerBranchId: string;
    buyerBranchName: string;
    sellerBranchId: string;
    sellerBranchName: string;
    items: OrderItem[];
    totalAmount: number;
    status: OrderStatus;
    notes?: string;
  }): Promise<string> {
    try {
      const orderData = {
        ...payload,
        orderNumber: `TR-${Date.now().toString().slice(-6)}`,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
      };
      
      const docRef = await addDoc(collection(db, 'orders'), orderData);
      console.log(`‚úÖ Created order: ${docRef.id}`);
      return docRef.id;
    } catch (error) {
      console.error('‚ùå Error creating order:', error);
      throw error;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á orders ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ - ‡πÉ‡∏ä‡πâ query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
   */
  async getOrdersByBranch(branchId: string, role: 'buyer' | 'seller'): Promise<Order[]> {
    try {
      const field = role === 'buyer' ? 'buyerBranchId' : 'sellerBranchId';
      
      // ‡πÉ‡∏ä‡πâ query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ where clause ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const q = query(
        collection(db, 'orders'),
        where(field, '==', branchId)
      );
      
      const snap = await getDocs(q);
      const orders = snap.docs.map((d) => ({ 
        id: d.id, 
        ...(d.data() as any) 
      })) as Order[];
      
      // Sort ‡πÉ‡∏ô JavaScript ‡πÅ‡∏ó‡∏ô Firestore
      orders.sort((a, b) => {
        const aTime = a.createdAt?.seconds || 0;
        const bTime = b.createdAt?.seconds || 0;
        return bTime - aTime; // newest first
      });
      
      return orders;
    } catch (error) {
      console.error(`‚ùå Error getting orders for ${role} ${branchId}:`, error);
      
      // Fallback: ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏ô JavaScript
      try {
        console.log('üîÑ Fallback: Getting all orders and filtering locally...');
        const allOrdersSnap = await getDocs(collection(db, 'orders'));
        const allOrders = allOrdersSnap.docs.map((d) => ({ 
          id: d.id, 
          ...(d.data() as any) 
        })) as Order[];
        
        const field = role === 'buyer' ? 'buyerBranchId' : 'sellerBranchId';
        const filtered = allOrders.filter((order) => 
          order[field] === branchId
        );
        
        // Sort by date
        filtered.sort((a, b) => {
          const aTime = a.createdAt?.seconds || 0;
          const bTime = b.createdAt?.seconds || 0;
          return bTime - aTime;
        });
        
        return filtered;
      } catch (fallbackError) {
        console.error('‚ùå Fallback also failed:', fallbackError);
        return [];
      }
    }
  },

  /**
   * ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢
   */
  async approveTransfer(orderId: string): Promise<void> {
    try {
      const ref = doc(db, 'orders', orderId);
      await updateDoc(ref, { 
        status: 'confirmed', 
        updatedAt: serverTimestamp() 
      });
      console.log(`‚úÖ Approved transfer: ${orderId}`);
    } catch (error) {
      console.error(`‚ùå Error approving transfer ${orderId}:`, error);
      throw error;
    }
  },

  /**
   * ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢
   */
  async rejectTransfer(orderId: string, reason?: string): Promise<void> {
    try {
      const ref = doc(db, 'orders', orderId);
      await updateDoc(ref, {
        status: 'cancelled',
        cancelReason: reason || null,
        updatedAt: serverTimestamp(),
      });
      console.log(`‚úÖ Rejected transfer: ${orderId}`);
    } catch (error) {
      console.error(`‚ùå Error rejecting transfer ${orderId}:`, error);
      throw error;
    }
  },

  /**
   * Subscribe to orders (realtime) - ‡πÉ‡∏ä‡πâ query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
   */
  onOrdersByBranch(
    branchId: string,
    role: 'buyer' | 'seller',
    callback: (orders: Order[]) => void
  ) {
    const field = role === 'buyer' ? 'buyerBranchId' : 'sellerBranchId';
    
    // ‡πÉ‡∏ä‡πâ query ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ where clause ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const q = query(
      collection(db, 'orders'),
      where(field, '==', branchId)
    );
    
    return onSnapshot(q, (snap) => {
      const orders = snap.docs.map((d) => ({ 
        id: d.id, 
        ...(d.data() as any) 
      })) as Order[];
      
      // Sort ‡πÉ‡∏ô JavaScript
      orders.sort((a, b) => {
        const aTime = a.createdAt?.seconds || 0;
        const bTime = b.createdAt?.seconds || 0;
        return bTime - aTime;
      });
      
      callback(orders);
    }, (error) => {
      console.error('‚ùå Realtime orders error:', error);
      
      // Fallback: ‡πÉ‡∏ä‡πâ polling ‡πÅ‡∏ó‡∏ô realtime
      console.log('üîÑ Falling back to simple query...');
      OrderService.getOrdersByBranch(branchId, role)
        .then(callback)
        .catch((err) => {
          console.error('‚ùå Fallback failed:', err);
          callback([]); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ array ‡∏ß‡πà‡∏≤‡∏á
        });
    });
  },
};

// ===== Legacy Support Functions =====

/**
 * ‡∏´‡∏≤ productId ‡∏à‡∏≤‡∏Å brand+model (‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility)
 */
async function findProductIdByBrandModel(brand: string, model?: string): Promise<string | null> {
  try {
    const brandId = slugifyId(brand);
    const modelId = slugifyId(model || 'unknown');
    return `${brandId}-${modelId}`;
  } catch (error) {
    console.error('‚ùå Error finding product ID:', error);
    return null;
  }
}

/**
 * Export legacy function for backward compatibility
 */
export { findProductIdByBrandModel };

// ===== Utility Functions =====

/**
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
 */
export const InventoryTestUtils = {
  /**
   * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async testConnection(storeId: string): Promise<boolean> {
    try {
      const testRef = doc(db, 'stores', storeId, 'test', 'connection');
      
      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await setDoc(testRef, {
        message: 'Connection test',
        timestamp: serverTimestamp(),
      });
      
      // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      const testDoc = await getDoc(testRef);
      const success = testDoc.exists();
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      if (success) {
        await deleteDoc(testRef);
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return false;
    }
  },

  /**
   * ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
   */
  async countInventoryItems(storeId: string): Promise<{
    brands: number;
    models: number;
    variants: number;
    dots: number;
    totalQty: number;
  }> {
    try {
      const inventoryRef = collection(db, 'stores', storeId, 'inventory');
      const brandsSnap = await getDocs(inventoryRef);
      
      let brands = 0;
      let models = 0;
      let variants = 0;
      let dots = 0;
      let totalQty = 0;
      
      for (const brandDoc of brandsSnap.docs) {
        brands++;
        
        const modelsRef = collection(brandDoc.ref, 'models');
        const modelsSnap = await getDocs(modelsRef);
        
        for (const modelDoc of modelsSnap.docs) {
          models++;
          
          const variantsRef = collection(modelDoc.ref, 'variants');
          const variantsSnap = await getDocs(variantsRef);
          
          for (const variantDoc of variantsSnap.docs) {
            variants++;
            
            const dotsRef = collection(variantDoc.ref, 'dots');
            const dotsSnap = await getDocs(dotsRef);
            
            for (const dotDoc of dotsSnap.docs) {
              dots++;
              const dotData = dotDoc.data();
              totalQty += dotData.qty || 0;
            }
          }
        }
      }
      
      return { brands, models, variants, dots, totalQty };
    } catch (error) {
      console.error('‚ùå Error counting inventory:', error);
      return { brands: 0, models: 0, variants: 0, dots: 0, totalQty: 0 };
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ inventory
   */
  async getInventorySummary(storeId: string): Promise<Array<{
    brand: string;
    model: string;
    variants: number;
    totalQty: number;
    totalDots: number;
  }>> {
    try {
      const summary: Array<{
        brand: string;
        model: string;
        variants: number;
        totalQty: number;
        totalDots: number;
      }> = [];
      
      const inventoryRef = collection(db, 'stores', storeId, 'inventory');
      const brandsSnap = await getDocs(inventoryRef);
      
      for (const brandDoc of brandsSnap.docs) {
        const brandData = brandDoc.data();
        const brandName = brandData.brandName || brandDoc.id;
        
        const modelsRef = collection(brandDoc.ref, 'models');
        const modelsSnap = await getDocs(modelsRef);
        
        for (const modelDoc of modelsSnap.docs) {
          const modelData = modelDoc.data();
          const modelName = modelData.modelName || modelDoc.id;
          
          let variants = 0;
          let totalQty = 0;
          let totalDots = 0;
          
          const variantsRef = collection(modelDoc.ref, 'variants');
          const variantsSnap = await getDocs(variantsRef);
          
          for (const variantDoc of variantsSnap.docs) {
            variants++;
            
            const dotsRef = collection(variantDoc.ref, 'dots');
            const dotsSnap = await getDocs(dotsRef);
            
            for (const dotDoc of dotsSnap.docs) {
              totalDots++;
              const dotData = dotDoc.data();
              totalQty += dotData.qty || 0;
            }
          }
          
          if (variants > 0) {
            summary.push({
              brand: brandName,
              model: modelName,
              variants,
              totalQty,
              totalDots,
            });
          }
        }
      }
      
      return summary.sort((a, b) => b.totalQty - a.totalQty);
    } catch (error) {
      console.error('‚ùå Error getting inventory summary:', error);
      return [];
    }
  },
};

// ===== Export All =====
export default {
  StoreService,
  InventoryService,
  OrderService,
  InventoryTestUtils,
  // Helper functions
  slugifyId,
  ensureArray,
  findProductIdByBrandModel,
};